{"meta":{"title":"XGo","subtitle":null,"description":null,"author":"XGo","url":"http://blog.xgo.pub"},"pages":[{"title":"","date":"2017-05-12T16:00:37.037Z","updated":"2017-05-12T16:00:37.037Z","comments":true,"path":"REDEME.html","permalink":"http://blog.xgo.pub/REDEME.html","excerpt":"","text":"gaoxiang104.github.io"},{"title":"categories","date":"2017-05-12T02:39:51.000Z","updated":"2017-05-12T16:00:37.037Z","comments":false,"path":"categories/index.html","permalink":"http://blog.xgo.pub/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-05-12T02:37:24.000Z","updated":"2017-05-12T16:00:37.037Z","comments":false,"path":"tags/index.html","permalink":"http://blog.xgo.pub/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"redis学习(1)——安装","slug":"redis-1","date":"2017-06-02T06:18:32.000Z","updated":"2017-06-05T11:37:00.042Z","comments":true,"path":"2017/06/02/redis-1/","link":"","permalink":"http://blog.xgo.pub/2017/06/02/redis-1/","excerpt":"","text":"一.安装系统：ubuntu16.04; redis版本：Redis 3.2.9 is the latest stable version; 1.1.下载redis安装包到redis官网https://redis.io查看当前稳定版本，使用wget下载：12# cd /use/local/src/# wget http://download.redis.io/releases/redis-3.2.9.tar.gz 1.2.解压12345678910111213# tar -zxvf redis-3.2.9.tar.gz redis-3.2.9/redis-3.2.9/.gitignoreredis-3.2.9/00-RELEASENOTESredis-3.2.9/BUGSredis-3.2.9/CONTRIBUTINGredis-3.2.9/COPYINGredis-3.2.9/INSTALLredis-3.2.9/MANIFESTOredis-3.2.9/Makefileredis-3.2.9/README.mdredis-3.2.9/deps/... 1.3.编译12345# cd redis-3.2.9/# ls00-RELEASENOTES CONTRIBUTING deps Makefile README.md runtest runtest-sentinel src utilsBUGS COPYING INSTALL MANIFESTO redis.conf runtest-cluster sentinel.conf tests# make 如果提示以下错误信息：1/bin/sh: cc: 未找到命令 说明未安装gcc，需安装gcc后，再进行make。 make成功后，src目录下多出一下文件，如下：1234567891011# ll -t总用量 18320-rwxr-xr-x 1 root root 25213 6月 2 14:59 redis-check-aof-rw-r--r-- 1 root root 33696 6月 2 14:59 redis-check-aof.o-rwxr-xr-x 1 root root 3092014 6月 2 14:59 redis-check-rdb-rwxr-xr-x 1 root root 337927 6月 2 14:59 redis-benchmark-rw-r--r-- 1 root root 107744 6月 2 14:59 redis-benchmark.o-rwxr-xr-x 1 root root 491135 6月 2 14:59 redis-cli-rw-r--r-- 1 root root 366208 6月 2 14:59 redis-cli.o-rwxr-xr-x 1 root root 3092014 6月 2 14:59 redis-sentinel-rwxr-xr-x 1 root root 3092014 6月 2 14:59 redis-server 1.4.安装执行make install：123456789# make installHint: It&apos;s a good idea to run &apos;make test&apos; ;) INSTALL install INSTALL install INSTALL install INSTALL install INSTALL install 可以查看/usr/local/bin下已有这些文件：12345678# cd /usr/local/bin/# ll redis*-rwxr-xr-x 1 root root 337927 6月 2 15:11 redis-benchmark-rwxr-xr-x 1 root root 25213 6月 2 15:11 redis-check-aof-rwxr-xr-x 1 root root 3092014 6月 2 15:11 redis-check-rdb-rwxr-xr-x 1 root root 491135 6月 2 15:11 redis-clilrwxrwxrwx 1 root root 12 6月 2 15:11 redis-sentinel -&gt; redis-server-rwxr-xr-x 1 root root 3092014 6月 2 15:11 redis-server 查看redis版本：12# redis-server -vRedis server v=3.2.9 sha=00000000:0 malloc=libc bits=64 build=74d1b0779b412792 能显示以上信息，说明redis安装完成。 二.修改配置2.1.创建配置文件目录、dump file目录、进程pid目录、log目录配置文件放在/etc/下，创建redis目录：12# cd /etc/# mkdir redis dump file、进程pid、log等，一般放在\\var\\目录下：12345# mkdir redis# cd redis/# mkdir data log run# lsdata log run 至此，目录创建完毕 2.2.copy配置文件，修改配置参数首先copy源码包下的redis.conf文件至/etc/redis/目录12345# cd /etc/redis/# cp /usr/local/src/redis-3.2.9/redis.conf .# ll总用量 48-rw-r--r-- 1 root root 46695 6月 2 15:45 redis.conf 修改redis.conf中的配置参数： 修改pid目录为/var/redis/run/12345678910# If a pid file is specified, Redis writes it where specified at startup# and removes it at exit.## When the server runs non daemonized, no pid file is created if none is# specified in the configuration. When the server is daemonized, the pid file# is used even if not specified, defaulting to \"/var/run/redis.pid\".## Creating a pid file is best effort: if Redis is not able to create it# nothing bad happens, the server will start and run normally.pidfile /var/redis/run/redis_6379.pid 修改dump目录为/var/redis/data/123456789# The working directory.## The DB will be written inside this directory, with the filename specified# above using the 'dbfilename' configuration directive.## The Append Only File will also be created inside this directory.## Note that you must specify a directory here, not a file name.dir /var/redis/data 修改log存放目录为/var/redis/log/1234# Specify the log file name. Also the empty string can be used to force# Redis to log on the standard output. Note that if you use standard# output for logging but daemonize, logs will be sent to /dev/nulllogfile /var/redis/log/redis.log 修改daemonize为yes，即默认以后台程序方式运行123# By default Redis does not run as a daemon. Use 'yes' if you need it.# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.daemonize yes 至此redis的简单配置完成，下面启动redis服务 三.启动脚本配置3.1.创建redis启动脚本copy源码包下的utils/redis_init_script至/etc/init.d/目录下，并改名为redis:123# cd /etc/init.d/# cp /usr/local/src/redis-3.2.9/utils/redis_init_script .# mv redis_init_script redis 修改启动文件redis：123456REDISPORT=6379EXEC=/usr/local/bin/redis-serverCLIEXEC=/usr/local/bin/redis-cliPIDFILE=/var/run/redis_$&#123;REDISPORT&#125;.pidCONF=\"/etc/redis/redis.conf\" 3.2.启动/关闭redis服务启动：123456# /etc/init.d/redis startStarting Redis server...[root@VM_11_46_centos init.d]# ps -ax | grep redis 2979 pts/0 S+ 0:00 vim redis.conf 3123 ? Ssl 0:00 /usr/local/bin/redis-server 127.0.0.1:6379 3127 pts/2 S+ 0:00 grep --color=auto redis 关闭：1# /etc/init.d/redis stop 四.参考文献http://blog.csdn.net/ludonqin/article/details/47211109","categories":[{"name":"redis","slug":"redis","permalink":"http://blog.xgo.pub/categories/redis/"}],"tags":[{"name":"redis","slug":"redis","permalink":"http://blog.xgo.pub/tags/redis/"}]},{"title":"CoreJava学习(4)——String类","slug":"coreJava-4","date":"2017-05-27T05:07:51.000Z","updated":"2017-06-05T16:05:49.000Z","comments":true,"path":"2017/05/27/coreJava-4/","link":"","permalink":"http://blog.xgo.pub/2017/05/27/coreJava-4/","excerpt":"","text":"1.String类的两种实例化方式直接赋值：123456public class StringDemo01 &#123; public static void main(String[] args) &#123; String name = \"Foo\"; System.out.println(\"name:\" + name); &#125;&#125; 通过关键字new123456public class StringDemo2 &#123; public static void main(String[] args) &#123; String name = new String(\"Foo\"); System.out.println(\"name:\" + name); &#125;&#125; 2.String的两种比较操作使用“==”进行比较:12345678910public class StringDemo3 &#123; public static void main(String[] args) &#123; String str1 = \"hello\"; // 直接赋值 String str2 = new String(\"hello\"); // 通过new赋值 String str3 = str2; // 传递引用 System.out.println(\"str1 == str2 --&gt; \" + (str1==str2)); // false System.out.println(\"str1 == str3 --&gt; \" + (str1==str3)); // false System.out.println(\"str2 == str3 --&gt; \" + (str2==str3)); // true &#125;&#125; 下面进行内存的分析： 使用”==”进行比较，实际是判断地址空间是否相等，判断的是地址值。 2.1.String比较：equals()如果要判断两个String的内容是否相等，则必须使用String类中提供的equals()方法完成。代码如下：12345678910public class StringDemo4 &#123; public static void main(String[] args) &#123; String str1 = \"hello\"; // 直接赋值 String str2 = new String(\"hello\"); // 通过new赋值 String str3 = str2; // 传递引用 System.out.println(\"str1 equals str2 --&gt; \" + (str1.equals(str2))); // true System.out.println(\"str1 equals str3 --&gt; \" + (str1.equals(str3))); // true System.out.println(\"str2 equals str3 --&gt; \" + (str2.equals(str3))); // true &#125;&#125; 结论：String的两种比较方式： 一种是使用“==”，比较的是地址值 另一种是使用“equals()”方法，比较的是具体的内容 3.两种实例化方式的区别在String中可以使用直接赋值和new调用构造方法的方式完成，那么该使用那种更合适呢？ 3.1.一个字符串就是String的匿名对象1234567public class StringDemo5 &#123; public static void main(String[] args) &#123; // 直接赋值的字符串\"hello\" 可以调用equals()方法 // 说明一个字符串就是一个String的匿名对象 System.out.println(\"hello\".equals(\"hello\")); &#125;&#125; 直接赋值的字符串”hello” 可以调用equals()方法。 说明一个字符串就是一个String的匿名对象。 3.2.String类两种实例化方式的区别——直接赋值 3.3.String类两种实例化方式的区别——通过关键字new赋值 使用直接赋值的方式只需要一个实例化对象即可，而使用new String()的方式则要开辟两个内存对象。开发中最好使用直接赋值的方式完成。 4.字符串的内容不可改变 实际上字符串内容的改变，改变的是内存地址的应用关系。","categories":[{"name":"CoreJava","slug":"CoreJava","permalink":"http://blog.xgo.pub/categories/CoreJava/"}],"tags":[{"name":"CoreJava","slug":"CoreJava","permalink":"http://blog.xgo.pub/tags/CoreJava/"},{"name":"String","slug":"String","permalink":"http://blog.xgo.pub/tags/String/"}]},{"title":"CoreJava学习(3)——构造方法与匿名对象","slug":"coreJava-3","date":"2017-05-26T07:08:02.000Z","updated":"2017-05-28T06:50:17.894Z","comments":true,"path":"2017/05/26/coreJava-3/","link":"","permalink":"http://blog.xgo.pub/2017/05/26/coreJava-3/","excerpt":"","text":"构造方法的概念及调用时机构造方法的定义格式：12345class 类名称 &#123; 访问权限 类名称 (类型1 参数1,类型2 参数2,...)&#123; ... // 构造方法没有返回值 &#125;&#125; 在构造方法的声明中需要注意以下几点： 构造方法的名称必须与类名一致 构造方法的声明处不能有任何返回值类型的声明 不能在构造方法中使用return返回值 调用时机java中实例化对象时调用构造方法。测试代码：1234567891011121314class Person&#123; public Person()&#123; System.out.println(\"create a Person object\"); &#125;&#125;public class ConstructorDemo &#123; public static void main(String[] args) &#123; System.out.println(\"声明对象\"); Person per = null; System.out.println(\"实例化对象\"); per = new Person(); &#125;&#125; 运行结果：123声明对象实例化对象create a Person object 默认的无参构造注意： 每个类中肯定都会有一个构造方法。 如果一个类中没有声明一个明确的构造方法，则会自动生存一个无参的什么都不做的构造方法。 12345class Person&#123; public Person()&#123; &#125;&#125; 构造方法的重载构造方法的重载过程与普通方法一样：参数的类型或个数不同 1234567891011121314class Person&#123; private String name; private int age; public Person()&#123; &#125; public Person(String name)&#123; this.setName(name); &#125; public Person(String name,int age)&#123; this.setName(name); this.setAge(age); &#125;&#125; 匿名对象的使用在Java中如果一个对象只使用一次，则就可以将其定义成匿名对象。匿名对象只开辟了堆内存。 12345678910111213class Person&#123; public Person()&#123; &#125; public void tell()&#123; System.out.println(\"tell()\"); &#125;&#125;public class ConstructorDemo &#123; public static void main(String[] args) &#123; new Person().tell(); &#125;&#125;","categories":[{"name":"CoreJava","slug":"CoreJava","permalink":"http://blog.xgo.pub/categories/CoreJava/"}],"tags":[{"name":"CoreJava","slug":"CoreJava","permalink":"http://blog.xgo.pub/tags/CoreJava/"}]},{"title":"CoreJava学习(2)——Java的封装性","slug":"coreJava-2","date":"2017-05-26T06:05:26.000Z","updated":"2017-05-28T06:50:17.894Z","comments":true,"path":"2017/05/26/coreJava-2/","link":"","permalink":"http://blog.xgo.pub/2017/05/26/coreJava-2/","excerpt":"","text":"为什么要有封装 封装就是保护内容。 保证某些属性或方法可以不被外部看见。 1234567891011121314151617class Person &#123; String name; int age; public void tell() &#123; System.out.println(\"姓名：\" + name + \"，年龄：\" + age); &#125;&#125;public class EncDemo01 &#123; public static void main(String[] args) &#123; Person per = new Person(); per.name = \"Foo\"; per.age = -30; // 将age设置为-30,语法上没有错误，但是从实际的角度看，是错误的。 per.tell(); &#125;&#125; 以上的代码，语法上没有问题，但是从实际的角度看，以上的代码绝对不符合要求。不合适的根本原因在与此处让属性可以直接被外部访问。 实现封装 将类中的属性设置为私有权限（private）,使得外部无法直接调用。 12345class Person &#123; private String name; private int age; ...&#125; getter()和setter()方法因为这些属性肯定是要表示一些实际的意义，那么这些有意义的内容肯定应该由外部设定，所以在java中对于封装性的访问就给出了一个明确的原则，此原则必须遵守。 被封装的属性如果需要被访问，则需要编写setter及getter方法完成。 例如：现在有一个属性，private String name; Setter（设置）：public void setName(String name); Getter（取得）：public String getName(); 12345678910111213141516171819202122232425262728class Person &#123; private String name; private int age; public int getAge() &#123; return age; &#125; public String getName() &#123; return name; &#125; public void setAge(int age) &#123; if(0&gt;=age &amp;&amp; 150 &lt;= 150 )&#123; //加入验证 this.age = age; &#125; else &#123; System.out.println(\"Illegal age field\"); &#125; &#125; public void setName(String name) &#123; this.name = name; &#125; public void tell() &#123; System.out.println(\"姓名：\" + name + \"，年龄：\" + age); &#125;&#125;","categories":[{"name":"CoreJava","slug":"CoreJava","permalink":"http://blog.xgo.pub/categories/CoreJava/"}],"tags":[{"name":"CoreJava","slug":"CoreJava","permalink":"http://blog.xgo.pub/tags/CoreJava/"}]},{"title":"CoreJava学习(1)——面向对象、类与对象","slug":"coreJava-1","date":"2017-05-26T01:28:02.000Z","updated":"2017-05-28T06:50:17.894Z","comments":true,"path":"2017/05/26/coreJava-1/","link":"","permalink":"http://blog.xgo.pub/2017/05/26/coreJava-1/","excerpt":"","text":"面向对象的三大特征 封装(Encapsulation) 对外部不可见。可以保护程序中的某些内容。 继承(Inheritance) 扩展类的功能 多态(Polymorphism) 方法的重栽 对象的多态性 类与对象 类是对某一类事物的描述，是抽象的、概念上的定义；对象是实际存在的该类事物的每个个体，因而也称实例(Instance); 类的定义与对象的创建1234567891011121314151617181920212223242526272829// 声明类class Person &#123; // 类中有两个属性 String name; int age; // 无参构造器 public Person() &#123; &#125; // 带参构造器 public Person(String name, int age) &#123; this.name = name; this.age = age; &#125; // 类中的方法 public void tell() &#123; System.out.println(\"姓名:\" + name + \",年龄:\" + age); &#125;&#125;public class ClassDemo01 &#123; public static void main(String[] args) &#123; // 声明对象，并使用`new`实例化对象 Person person = new Person(\"Foo\", 11); person.tell(); &#125;&#125; Java中对象内存划分类属于引用传递类型，引用数据类型必然存在栈内存-堆内存的引用关系。 内存划分：对象创建之初 声明对象：Person per,栈内存中声明的，只开辟了栈内存的对象是无法使用的，必须有其堆内存的引用才可以使用。 实例化对象：new Person()，在堆中开辟空间，所有的内容都是默认值。 String：是一个字符串，本身是一个类，就是一个引用数据类型，则此时默认值就是null。 int：是一个整数，本身是一个数，所以是基本数据类型，则此时的默认值是0。 内存操作：为属性赋值 对象是保存在栈内存之中，属性是保存在堆内存之中。 内存操作：声明并创建多个对象 内存操作：声明两个对象，并指向同一个堆内存 所谓的引用数据类型，实际上传递的就是堆内存的使用权，可以同时为一个堆内存空间定义多个栈内存的引用。 垃圾产生的内存关系 因为per2改变了指向，所以其原本的内存空间就没有任何栈的引用，则这样的内存就被称为垃圾，等待这垃圾收集机制进行回收。 GC：垃圾收集机制的简称。","categories":[{"name":"CoreJava","slug":"CoreJava","permalink":"http://blog.xgo.pub/categories/CoreJava/"}],"tags":[{"name":"CoreJava","slug":"CoreJava","permalink":"http://blog.xgo.pub/tags/CoreJava/"}]},{"title":"nginx学习(3)——配置文件管理","slug":"nginx-3-configurationFile","date":"2017-05-20T14:45:47.000Z","updated":"2017-05-20T16:41:55.000Z","comments":true,"path":"2017/05/20/nginx-3-configurationFile/","link":"","permalink":"http://blog.xgo.pub/2017/05/20/nginx-3-configurationFile/","excerpt":"","text":"1. 配置文件在哪？ NGINX Plus is similar to other services in that it has a text-based configuration file written in a particular format. By default the file is named nginx.conf and placed in the /etc/nginx directory. NGINX Plus与其他服务类似，因为它具有以特定格式编写的基于文本的配置文件。默认情况下，文件名为nginx.conf并放在/etc/nginx目录中。(对于开源NGINX产品，所述位置取决于用于安装NGINX和操作系统程序包的系统。我的系统是ubuntu，nginx.conf所在目录是：/etc/nginx) 2. 配置文件结构 The configuration file consists of directives and their parameters. Simple (single-line) directives each end with a semicolon. Other directives act as “containers” that group together related directives, enclosing them in curly braces ( {} ). Here are some examples of simple directives. 配置文件由指令及其参数组成。简单（单行）指令各自以分号(;)结尾。其他指令作为“容器”，将相关指令组合在一起，将其包围在花括号（ {} ）中。以下是简单指令的一些示例。 123user nobody;error_log logs/error.log notice;worker_processes 1; 3. 引用子配置文件为了使配置更易于维护，可以将一组特定功能的配置文件存储在/etc/nginx/conf.d目录中，并使用include指令将引入nginx.conf文件中。123include conf.d/http;include conf.d/stream;include conf.d/exchange-enhanced; 4. traffic配置 A few top-level directives, referred to as contexts, group together the directives that apply to different traffic types: 一些顶级指令，称为上下文，将适用于不同traffic类型的指令组合在一起： events – General connection processing http – HTTP traffic mail – Mail traffic stream – TCP traffic In each of the traffic-handling contexts, you include one or more server contexts to define virtual servers that control the processing of requests. The directives you can include within a server context vary depending on the traffic type. 在每一个traffic-handling上下文中，包括一个或多个server上下文来定义控制和处理虚拟服务的请求。根据不同的traffic在server上下文中设置相应指令。 For HTTP traffic (the http context), each server directive controls the processing of requests for resources at particular domains or IP addresses. One or more location contexts in a server context define how to process specific sets of URIs. 对于HTTP流量（http上下文），每个server指令控制对特定域名或IP地址上的资源请求的处理。location上下文中的一个或多个上下文server定义了如何处理特定的URI集合。 For mail and TCP traffic (the mail and stream contexts) the server directives each control the processing of traffic arriving at a particular TCP port or UNIX socket. 对于邮件和TCP流量（mail和stream上下文），server伪指令各自控制到达特定TCP端口或UNIX套接字的流量处理。 以下配置说明了上下文的使用。12345678910111213141516171819202122232425262728293031323334user nobody; # a directive in the &apos;main&apos; contextevents &#123; # configuration of connection processing&#125;http &#123; # Configuration specific to HTTP and affecting all virtual servers server &#123; # configuration of HTTP virtual server 1 location /one &#123; # configuration for processing URIs with &apos;/one&apos; &#125; location /two &#123; # configuration for processing URIs with &apos;/two&apos; &#125; &#125; server &#123; # configuration of HTTP virtual server 2 &#125;&#125;stream &#123; # Configuration specific to TCP and affecting all virtual servers server &#123; # configuration of TCP virtual server 1 &#125;&#125; For most directives, a context that is defined inside another context (a child context) inherits the values of directives included at the parent level. To override a value inherited from the parent, include the directive in the child context. For more information on context inheritence, see the documentation for the proxy_set_header directive. 对于大多数指令，在另一个上下文（子上下文）中定义的上下文将继承父级中包含的伪指令的值。要覆盖从父进程继承的值，请在子上下文中包含该指令。有关上下文遗留的更多信息，请参阅指令的proxy_set_header文档。 5. 生效修改的配置要使更改修改过后的配置文件生效，Nginx必须重新加载文件。方式有两种： reload方式（推荐使用） 使用reload signal来生效修改后的配置，而不会中断当前请求的处理。 1# nginx -s reload 重启Nginx 步骤： 关闭Nginx 1# nginx -s stop 启动Nginx 1# nginx -c /etc/nginx/nginx.conf 6. 参考文献CREATING NGINX PLUS CONFIGURATION FILES","categories":[{"name":"nginx","slug":"nginx","permalink":"http://blog.xgo.pub/categories/nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://blog.xgo.pub/tags/nginx/"}]},{"title":"nginx学习(2)——进程和运行时控制","slug":"nginx-2-beginnerGuide","date":"2017-05-13T05:38:57.000Z","updated":"2017-05-14T16:13:08.504Z","comments":true,"path":"2017/05/13/nginx-2-beginnerGuide/","link":"","permalink":"http://blog.xgo.pub/2017/05/13/nginx-2-beginnerGuide/","excerpt":"","text":"1. 主进程和工作进程（Master and Worker Processes） NGINX has one master process and one or more worker processes. If caching is enabled, the cache loader and cache manager processes also run at startup. NGINX有一个主进程和一个或多个工作进程。如果启用缓存，缓存加载程序和缓存管理器进程也将在启动时运行。 The main purpose of the master process is to read and evaluate configuration files, as well as maintain the worker processes. 主程序的主要目的是读取和评估配置文件以及维护工作进程。 The worker processes do the actual processing of requests. NGINX relies on OS-dependent mechanisms to efficiently distribute requests among worker processes. The number of worker processes is defined in the nginx.conf configuration file and can be fixed for a given configuration or automatically adjusted to the number of available CPU cores (see worker_processes). 工作进程处理真实的请求。NGINX依赖于依赖于操作系统的机制来有效地在工作进程之间分配请求。工作进程的数量在nginx.conf配置文件中定义，并且可以针对给定的配置进行修复，或者自动调整为可用CPU内核的数量（参见 worker_processes）。 2. nginx控制首先查看nginx命令的help123456789101112131415# nginx -h nginx version: nginx/1.12.0Usage: nginx [-?hvVtTq] [-s signal] [-c filename] [-p prefix] [-g directives]Options: -?,-h : this help -v : show version and exit -V : show version and configure options then exit -t : test configuration and exit -T : test configuration, dump it and exit -q : suppress non-error messages during configuration testing -s signal : send signal to a master process: stop, quit, reopen, reload -p prefix : set prefix path (default: /etc/nginx/) -c filename : set configuration file (default: /etc/nginx/nginx.conf) -g directives : set global directives out of configuration file 2.1. 启动nginx启动方式如下：1# nginx -c /etc/nginx/nginx.conf 备注：网上找的启动方式，看help并不明白 nginx -c 就是start 2.2. nginx -s通过nginx -s signal来控制主进程，下面是signal的详细解释： stop : 快速关闭服务 quit : 正常关闭服务,该命令应该在启动nginx的同一用户下执行。 reload : 重新加载配置文件 reopen : 重新打开日志文件 Changes made in the configuration file will not be applied until the command to reload configuration is sent to nginx or it is restarted. To reload configuration, execute: nginx重启之前，配置文件中修改的内容将不会被应用，如果需要重新加载配置文件，需要执行：1nginx -s reload Once the master process receives the signal to reload configuration, it checks the syntax validity of the new configuration file and tries to apply the configuration provided in it. If this is a success, the master process starts new worker processes and sends messages to old worker processes, requesting them to shut down. Otherwise, the master process rolls back the changes and continues to work with the old configuration. Old worker processes, receiving a command to shut down, stop accepting new connections and continue to service current requests until all such requests are serviced. After that, the old worker processes exit. 一旦主进程收到要重新加载配置的命令，它将检查新配置文件的语法有效性，并尝试应用其中提供的配置。如果这是成功的，主进程将启动新的工作进程，并向旧的工作进程发送消息，请求它们关闭。否则，主进程回滚更改，并继续使用旧配置。老工作进程，接收关闭命令，停止接受新连接，并继续维护当前请求，直到所有这些请求得到维护。之后，旧的工作进程退出。 2.3. 查看nginx进程列表获取正在运行的nginx进程列表，可以使用下面的命令：1234# ps -ax | grep nginx 9345 ? Ss 0:00 nginx: master process nginx -c /etc/nginx/nginx.conf 9358 ? S 0:00 nginx: worker process11734 pts/18 S+ 0:00 grep --color=auto nginx 可以使用kill nginx master process正常关闭nginx :1keill -s QUIT 9345 3. 配置文件结构介绍 The way nginx and its modules work is determined in the configuration file. By default, the configuration file is named nginx.conf and placed in the directory /usr/local/nginx/conf, /etc/nginx, or /usr/local/etc/nginx. 配置文件中确定nginx及其模块的工作方式。默认的配置文件是 /etc/nginx/ 目录中的 nginx.conf 文件。 4. 参考文献 nginx documentation：Beginner’s GuideRuntime control :","categories":[{"name":"nginx","slug":"nginx","permalink":"http://blog.xgo.pub/categories/nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://blog.xgo.pub/tags/nginx/"}]},{"title":"nginx学习(1)——安装","slug":"nginx-1-install","date":"2017-05-12T08:14:25.000Z","updated":"2017-05-13T16:10:47.699Z","comments":true,"path":"2017/05/12/nginx-1-install/","link":"","permalink":"http://blog.xgo.pub/2017/05/12/nginx-1-install/","excerpt":"","text":"1. 安装计划 系统：ubuntu 16.04 LTS X86_64 安装nginx版本：nginx-1.12.0 Stable version 安装方式：使用apt安装 2. 安装2.1. 查找Ubuntu发行版的codename Version Codename Supported Platforms 12.04 precise x86_64, i386 14.04 trusty x86_64, i386, aarch64/arm64 16.04 xenial x86_64, i386, ppc64el, aarch64/arm64 16.10 yakkety x86_64, i386 2.2. 添加apt sources将以下内容追加到文件/etc/apt/sources.list末尾：12deb http://nginx.org/packages/ubuntu/ xenial nginxdeb-src http://nginx.org/packages/ubuntu/ xenial nginx 2.3. 下载并导入nginx signing keyRPM软件包和Debian / Ubuntu存储库都使用数字签名来验证下载包的完整性和起源。为了检查签名，需要下载 nginx签名密钥 并将其导入rpm或apt 程序的密钥环：1sudo apt-key add /%密钥所在文件夹%/nginx_signing.key 2.4. 执行安装12sudo apt-get updatesudo apt-get install nginx 2.5. 安装完成123456789101112131415$ nginx -hnginx version: nginx/1.12.0Usage: nginx [-?hvVtTq] [-s signal] [-c filename] [-p prefix] [-g directives]Options: -?,-h : this help -v : show version and exit -V : show version and configure options then exit -t : test configuration and exit -T : test configuration, dump it and exit -q : suppress non-error messages during configuration testing -s signal : send signal to a master process: stop, quit, reopen, reload -p prefix : set prefix path (default: /etc/nginx/) -c filename : set configuration file (default: /etc/nginx/nginx.conf) -g directives : set global directives out of configuration file 3. 参考文档 nginx documentation：Installing nginx","categories":[{"name":"nginx","slug":"nginx","permalink":"http://blog.xgo.pub/categories/nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://blog.xgo.pub/tags/nginx/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-05-11T08:14:25.000Z","updated":"2017-05-12T17:09:10.000Z","comments":true,"path":"2017/05/11/hello-world/","link":"","permalink":"http://blog.xgo.pub/2017/05/11/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}